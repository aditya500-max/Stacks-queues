Method-1: bruteforce method:
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        vector<int>ans;
        map<int,int>mpp;
        for(int j=0;j<nums2.size();j++){
            mpp[nums2[j]]=j;
        }
        for(int i=0;i<nums1.size();i++){
            bool flag=false;
            for(int k=mpp[nums1[i]]+1;k<nums2.size();k++){
                if(nums2[k]>nums1[i]){
                    ans.push_back(nums2[k]);
                    flag=true;break;
                }
            }
            if(flag==false){
                ans.push_back(-1);
            }
            
        }
        return ans;
    }
};
Method-2 Optimum method:
//using stack// traversing the array from back// refer striver A2Z
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
         stack<int>st; vector<int> res; unordered_map<int,int>mp;
         for(int i=nums2.size()-1;i>=0;i--){
             while(!st.empty()&&st.top()<=nums2[i]){
                st.pop();
             }
             if(st.empty()){
                mp[nums2[i]]=-1;
             }else{
                mp[nums2[i]]=st.top();
             }
             st.push(nums2[i]);
         }
    
    for(auto it:nums1){
        res.push_back(mp[it]);
    }
    return res;
    }
};
